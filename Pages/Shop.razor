@page "/Shop"
@using ProductFE.Models;
@using FeProduct.Services;
@inject ProductService ProductService;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Components.QuickGrid;


<div class="card mb-3">
    <div class="card-header d-flex flex-row">
        <h5 class="flex-fill">MinimalX Shop</h5>
        <div class="px-1">
            <select class="form-select form-select-sm" @onchange="OnPageSizeChanged">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>
    <div class="card-body pb-2 px-0 mb-0">
        <QuickGrid Class="table table-striped m-0"
                   Items="@FilteredProducts.AsQueryable()"
                   ItemKey="@(product => product.Id)"
                   Pagination="paginationState">
            <PropertyColumn Title="Name"
                            Property="@(product => product.Name)"
                            Class="align-middle" />
            <PropertyColumn Title="Price"
                            Property="@(product => product.Price)"
                            Sortable="true"
                            Class="align-middle">
                <ColumnOptions>
                    <div class="d-flex flex-row">
                        <input @bind="PriceFilter" class="form-control form-control-sm" placeholder="Filter Price" />
                        <button @onclick="ApplyFilters" class="btn btn-primary btn-sm ms-1">Filter</button>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        </QuickGrid>
    </div>
    <div class="card-footer">
        <Paginator State="paginationState" />
    </div>
</div>

@code {
    private List<Product> Products = new();
    private List<Product> FilteredProducts = new();
    private string PriceFilter = string.Empty;
    private string StockFilter = string.Empty;
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };

    protected override async Task OnInitializedAsync() {
        Products = await ProductService.GetProductsAsync();
        FilteredProducts = Products;
    }

    private void ApplyFilters() {
        FilteredProducts = Products.Where(product => 
            (string.IsNullOrEmpty(PriceFilter) || product.Price.ToString().Contains(PriceFilter)) && 
            (string.IsNullOrWhiteSpace(StockFilter) || product.StockQuantity.ToString().Equals(StockFilter))
        ).ToList();
    }

    private void OnPageSizeChanged(ChangeEventArgs e) {
        int newPageSize = int.Parse(e.Value.ToString());
        paginationState = new PaginationState { ItemsPerPage = newPageSize };
    }
}  