@page "/product-details/{id:int}"
@using ProductFE.Models;
@using FeProduct.Services;
@inject ProductService ProductService;
@inject NavigationManager Navigation;
@inject HttpClient Http;

<PageTitle>@(product?.Name ?? "Product Details")</PageTitle>
<div class="container py-5">
   @if (product == null)
   {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading product details...</p>
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="row g-0">
                        <!-- Image Section -->
                        <div class="col-md-5">
                           @if (!string.IsNullOrEmpty(product.ImageUrl))
                           {
                                <img src="@product.ImageUrl" class="img-fluid rounded-start" alt="@product.Name" style="object-fit: cover; height: 100%; width: 100%;" />
                           }
                           else
                           {
                                <div class="bg-light d-flex align-items-center justify-content-center" style="height: 100%; width: 100%;">
                                    <span class="text-muted">No Image Available</span>
                                </div>
                           }
                        </div>
                        <!-- Details Section -->
                        <div class="col-md-7">
                        <div class="card-body">
                            <h3 class="card-title mb-3">@product.Name</h3>
                            <p class="card-text"><strong>Price:</strong> $@product.Price</p>
                            <p class="card-text"><strong>Stock:</strong> @product.StockQuantity available</p>
                            <div class="mt-4 d-flex gap-2">
                                <button class="btn btn-outline-primary" @onclick="ContinueShopping">
                                    Continue Shopping
                                </button>
                                <button class="btn btn-success" @onclick="AddToCart">
                                    Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(addToCartMessage))
    {
        <div class="row justify-content-center mt-3">
            <div class="col-lg-8">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @addToCartMessage
                    <button type="button" class="btn-close" @onclick="() => addToCartMessage = null"></button>
                </div>
            </div>
        </div>
    }
    }
</div>


@code {
    [Parameter] public int id { get; set; }
    private Product product;
    private string addToCartMessage = "";

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProductByIdAsync(id);
    }

    
    private void ContinueShopping()
    {
        Navigation.NavigateTo("/products");
    }

     private async Task AddToCart()
    {
        addToCartMessage = "";

        var cartItemDto = new CartItemDto
    {
        ProductId = product.Id,
        Quantity = 1,
        UnitPrice = product.Price
    };

        @* await AuthService.SetAuthHeaderAsync(); // attach JWT *@
        var response = await Http.PostAsJsonAsync("api/cart", cartItemDto);
        if (response.IsSuccessStatusCode)
        {
             addToCartMessage = $"{product.Name} was added to cart!";
        }
        else
        {
            addToCartMessage = "Failed to add to cart.";
        }
    }

    public class CartItem
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public string UserId { get; set; } = string.Empty;
    }
 
}